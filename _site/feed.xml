<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-04T17:20:41+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">TechyLane - Tech Tutorials</title><subtitle>Our site gives you technical series related to java, java related topics, amazon S3. Our aim is to provide a brief knowledge on these topics so that you can easily understand them.</subtitle><entry><title type="html">Create Github Account</title><link href="http://localhost:4000/create-a-website/create-github-account" rel="alternate" type="text/html" title="Create Github Account" /><published>2020-06-28T12:00:00+05:30</published><updated>2020-06-28T12:00:00+05:30</updated><id>http://localhost:4000/create-a-website/create-github-account</id><content type="html" xml:base="http://localhost:4000/create-a-website/create-github-account">&lt;h1 id=&quot;create-hosting-using-github&quot;&gt;Create Hosting Using Github&lt;/h1&gt;

&lt;p&gt;In this tutorial, we will learn about Github, how to create account on Github and create place i.e repository to push or save our code(website code).&lt;/p&gt;

&lt;h2 id=&quot;what-is-github&quot;&gt;What is Github?&lt;/h2&gt;
&lt;p&gt;Github is a platform where you can host your code, projects(website in our case).
It ranges from open source and also fits for business.&lt;/p&gt;

&lt;h2 id=&quot;to-create-github-account&quot;&gt;To Create Github Account&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Step 1 - Go to &lt;a href=&quot;https://github.com&quot; title=&quot;Github&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Step 2 - Click on Sign Up.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 3 - Fill the sign Up form. Here username will be used later in your website name.&lt;/p&gt;

    &lt;p&gt;For Eg- your username is - techylane, then your website name would be techylane.github.io. You can also change your username if you want to.&lt;/p&gt;

    &lt;p&gt;After filling, Click on Create Account.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Create Account Screen&quot; title=&quot;Create Account Screen&quot; src=&quot;/assets/img/create-a-website/create-github-account/create-account-screen.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 4 - In this screen, Click on Join a free plan button.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Join Free Plan&quot; title=&quot;Join Free Plan&quot; src=&quot;/assets/img/create-a-website/create-github-account/join-free-plan.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 5 - Choose the option which suits you best and then click on Complete Setup.&lt;/li&gt;
  &lt;li&gt;Step 6 - Now you get this screen&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Verify Email Address&quot; title=&quot;Verify Email Address&quot; src=&quot;/assets/img/create-a-website/create-github-account/verify-email-address.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 7 - Now verify by clicking on the link you get in email box. After clicking on link, you will get below screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;GitHub Skip Now&quot; title=&quot;GitHub Skip Now&quot; src=&quot;/assets/img/create-a-website/create-github-account/github-skip-now.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 8 - Choose skip for now option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have successfully created your Github account.&lt;/p&gt;

&lt;h2 id=&quot;create-repository-on-github&quot;&gt;Create repository on Github&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Step 1 - Login to your Github Account.&lt;/li&gt;
  &lt;li&gt;Step 2 - After login, you will get below screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;GitHub Homepage&quot; title=&quot;GitHub Homepage&quot; src=&quot;/assets/img/create-a-website/create-github-account/github-homepage.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 3 - Click on Create Repository&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Create Repository Screen&quot; title=&quot;Create Repository Screen&quot; src=&quot;/assets/img/create-a-website/create-github-account/create_repository_screen.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In this screen, Enter Repository name in the same format we have filled.&lt;/p&gt;

&lt;p&gt;Later, your website can be accessed by this domain name.&lt;/p&gt;

&lt;p&gt;Select public option to make this repository public.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Step 4 - Click on Create repository and you will get below screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Repository Download Screen&quot; title=&quot;Repository Download Screen&quot; src=&quot;/assets/img/create-a-website/create-github-account/repostiory-download-screen.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 5 - Copy the repository link which we will use in next tutorial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you are successfully able to create your repository.&lt;/p&gt;

&lt;p&gt;In this tutorial, we learned about Github and how to create repository.&lt;/p&gt;

&lt;h3 id=&quot;further-study-material&quot;&gt;Further Study Material&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;For Github - &lt;a href=&quot;https://github.com&quot; title=&quot;For GitHub&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To create repository - &lt;a href=&quot;https://help.github.com/en/enterprise/2.13/user/articles/creating-a-new-repository&quot; title=&quot;To create Repository&quot;&gt;Creating a new repository&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;In the next tutorial&lt;/strong&gt;, we will learn how to get and save website code to the Github account.&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="create a website" /><summary type="html">Create Hosting Using Github</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/create-a-website/create-github-account/github.png" /><media:content medium="image" url="http://localhost:4000/assets/img/create-a-website/create-github-account/github.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Website Basics Terminology</title><link href="http://localhost:4000/create-a-website/basics" rel="alternate" type="text/html" title="Website Basics Terminology" /><published>2020-06-28T11:00:00+05:30</published><updated>2020-06-28T11:00:00+05:30</updated><id>http://localhost:4000/create-a-website/basics</id><content type="html" xml:base="http://localhost:4000/create-a-website/basics">&lt;p&gt;In this basically, we will learn about the website topics, technologies used by us and will write short discription about them.
Later in the series, we will learn about these topics in detail.&lt;/p&gt;

&lt;h3 id=&quot;so-lets-start--&quot;&gt;So lets start -&lt;/h3&gt;

&lt;h2 id=&quot;1-domain-name&quot;&gt;1. Domain Name&lt;/h2&gt;

&lt;p&gt;It is used for finding your website. This is basically the name of the website.
Other users can access yur website using this name by searching on google.&lt;/p&gt;

&lt;p&gt;You need to buy domain name from the domain name registrar.
Eg - &lt;a href=&quot;https://www.domain.com&quot; title=&quot;Domain&quot;&gt;Domain&lt;/a&gt;, &lt;a href=&quot;https://www.bluehost.in&quot; title=&quot;Bluehost&quot;&gt;Bluehost&lt;/a&gt;, &lt;a href=&quot;https://www.hostgator.in&quot; title=&quot;HostGator&quot;&gt;HostGator&lt;/a&gt;, &lt;a href=&quot;https://in.godaddy.com&quot; title=&quot;GoDaddy&quot;&gt;GoDaddy&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-hosting&quot;&gt;2. Hosting&lt;/h2&gt;

&lt;p&gt;This is the place where your website live.
Basically, its a machine or server where website code lives.
You need to buy hosting package for your website from these Websites.
Eg - &lt;a href=&quot;https://www.domain.com&quot; title=&quot;Domain&quot;&gt;Domain&lt;/a&gt;, &lt;a href=&quot;https://www.bluehost.in&quot; title=&quot;Bluehost&quot;&gt;Bluehost&lt;/a&gt;, &lt;a href=&quot;https://www.hostgator.in&quot; title=&quot;HostGator&quot;&gt;HostGator&lt;/a&gt;, &lt;a href=&quot;https://in.godaddy.com&quot; title=&quot;GoDaddy&quot;&gt;GoDaddy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this series, we will use &lt;strong&gt;Github&lt;/strong&gt; as it’s free and suits for our objective perfectly.&lt;/p&gt;

&lt;h2 id=&quot;3-git&quot;&gt;3. Git&lt;/h2&gt;
&lt;p&gt;Git is the most widely used version control system.
It helps in managing and tracking code.
In our case, You are able to get and save code on the Github repository using Git.&lt;/p&gt;

&lt;h2 id=&quot;4-website-creation&quot;&gt;4. Website Creation&lt;/h2&gt;

&lt;p&gt;You need to build your website through CMS like wordpress.com or you can write some basic HTML code directly.
We will use Jekyll for blog development as it is easy to use and is compatible with Github.&lt;/p&gt;

&lt;h2 id=&quot;5-search-engine-optimizationseo&quot;&gt;5. Search Engine Optimization(SEO)&lt;/h2&gt;

&lt;p&gt;SEO is the most important part of the website development. It increases the visibility of the website to users who are searching on web search engine. It helps the web crawlers to know the intent of your site.&lt;/p&gt;

&lt;p&gt;SEO plays the most important part in getting “Organic” search results.&lt;/p&gt;

&lt;p&gt;Now you know the basic terminology and ready to dive in for website creation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the next tutorial&lt;/strong&gt;, we will talk about the first step for website creation i.e Github Account Setup.&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="create a website" /><summary type="html">In this basically, we will learn about the website topics, technologies used by us and will write short discription about them. Later in the series, we will learn about these topics in detail.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/create-a-website/basics/basics.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/create-a-website/basics/basics.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Create A Website-Introduction</title><link href="http://localhost:4000/create-a-website/introduction" rel="alternate" type="text/html" title="Create A Website-Introduction" /><published>2020-06-28T00:00:00+05:30</published><updated>2020-06-28T00:00:00+05:30</updated><id>http://localhost:4000/create-a-website/introduction</id><content type="html" xml:base="http://localhost:4000/create-a-website/introduction">&lt;h1 id=&quot;introduction-to-the-series&quot;&gt;INTRODUCTION TO THE SERIES&lt;/h1&gt;

&lt;p&gt;This series is all about how to create a website for &lt;strong&gt;FREE&lt;/strong&gt;. Yes, it’s &lt;strong&gt;FREE&lt;/strong&gt;.
I am gonna create a website from scratch to full featured in this series.
After that, we will learn how to earn money by integrating Google Adsense.&lt;/p&gt;

&lt;p&gt;This series helps you in -&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a website for free (with limited feature), I will call it as &lt;strong&gt;FREE&lt;/strong&gt; website&lt;/li&gt;
  &lt;li&gt;Website with almost all necessary features (requires some money), I will call it as &lt;strong&gt;PAID&lt;/strong&gt; website&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - This series will not focus on designing Website.&lt;/p&gt;

&lt;h2 id=&quot;what-will-you-get-in-final-website-&quot;&gt;What will you get in Final website-&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;FREE&lt;/strong&gt; Website&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HomePage&lt;/li&gt;
  &lt;li&gt;HTTPS domain&lt;/li&gt;
  &lt;li&gt;Contact through Mail&lt;/li&gt;
  &lt;li&gt;Blog&lt;/li&gt;
  &lt;li&gt;Comment Box&lt;/li&gt;
  &lt;li&gt;Sign Up Form(Subscribe  Form)&lt;/li&gt;
  &lt;li&gt;Share Post Automatically&lt;/li&gt;
  &lt;li&gt;SEO&lt;/li&gt;
  &lt;li&gt;Caching static files&lt;/li&gt;
  &lt;li&gt;Google Adsense&lt;/li&gt;
  &lt;li&gt;Google Analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PAID&lt;/strong&gt; Website&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;FREE website Features&lt;/li&gt;
  &lt;li&gt;Custom domain name&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-knowledge-you-require-for-this-series&quot;&gt;What knowledge you require for this series&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Github&lt;/li&gt;
  &lt;li&gt;Jekyll&lt;/li&gt;
  &lt;li&gt;HTML, CSS&lt;/li&gt;
  &lt;li&gt;your favourite IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you dont know above skills, dont worry we will teach you basic things about them and believe me its easy.&lt;/p&gt;

&lt;h2 id=&quot;other-alternatives&quot;&gt;Other Alternatives&lt;/h2&gt;

&lt;p&gt;Before coming to this website, you may heard of various ways to create website or blog&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Wordpress&lt;/li&gt;
  &lt;li&gt;Medium or Ghost&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-wordpress&quot;&gt;1. Wordpress&lt;/h3&gt;
&lt;p&gt;You can use wordpress as it provides User Interface to build your website and there are lot of plugins available.
But for that, you need to buy domain and hosting which requires some money.&lt;/p&gt;

&lt;p&gt;I will prefer this option when you want your own brand and are ready to invest some money.&lt;/p&gt;

&lt;h3 id=&quot;2-portals-like-medium-and-ghost&quot;&gt;2. Portals like Medium and Ghost&lt;/h3&gt;

&lt;p&gt;If you are thinking to start blogs, you can also opt for medium or ghost.
They are free and lets you earn money (need to check whether your country lies in this or not).&lt;/p&gt;

&lt;p&gt;I personally not recommend it as -&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it works only for blogs&lt;/li&gt;
  &lt;li&gt;if you are willing to make your own brand&lt;/li&gt;
  &lt;li&gt;you have to compromise with any change they make&lt;/li&gt;
  &lt;li&gt;look and feel of your blogs not controlled by you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my opinion, build a &lt;strong&gt;FREE&lt;/strong&gt; website(which we will tell you how) and then decide to invest money on the basis of response.&lt;/p&gt;

&lt;h3 id=&quot;this-series-comprises--&quot;&gt;This Series comprises -&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/create-a-website/introduction&quot; title=&quot;Introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/create-a-website/basics&quot; title=&quot;Website Basics&quot;&gt;Website Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/create-a-website/create-github-account&quot; title=&quot;Create Github Account&quot;&gt;Create Github Account&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;How to Use Git&lt;/li&gt;
  &lt;li&gt;HomePage Design&lt;/li&gt;
  &lt;li&gt;Use Custom Domain For Github Pages&lt;/li&gt;
  &lt;li&gt;Integrate Contact Us Form Using FormsPree&lt;/li&gt;
  &lt;li&gt;Create A Blog PART 1 - Jekyll Project&lt;/li&gt;
  &lt;li&gt;Create A Blog PART 2 - Create Blog Post&lt;/li&gt;
  &lt;li&gt;Create A Blog PART 3 - Show All Blog Posts&lt;/li&gt;
  &lt;li&gt;Integrate Comment Box Using Disqus&lt;/li&gt;
  &lt;li&gt;Integrate Sign Up Form(Subscribe Form) Using MailChimp&lt;/li&gt;
  &lt;li&gt;Share Post to Subscribers Automatically&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can skip to any tutorial if you want, but I will recommend to watch series tutorial by tutorial as they are linked to each other.&lt;/p&gt;

&lt;p&gt;At the end of each tutorial, we will provide you some reference for that tutorial for your further study.
We are able to create website in a week, lets see how it works for you.&lt;/p&gt;

&lt;p&gt;At the end of this series, you will get a website like &lt;a href=&quot;https://vbisht7038.github.io&quot; title=&quot;Foody Blog&quot;&gt;Foody Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the next tutorial&lt;/strong&gt;, we will talk about the basic concepts in website creation.&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="create a website" /><summary type="html">INTRODUCTION TO THE SERIES</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/create-a-website/introduction/introduction.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/create-a-website/introduction/introduction.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Amazon S3 LifeCycle Management</title><link href="http://localhost:4000/AmazonS3/lifecycle-management" rel="alternate" type="text/html" title="Amazon S3 LifeCycle Management" /><published>2020-06-03T14:30:00+05:30</published><updated>2020-06-03T14:30:00+05:30</updated><id>http://localhost:4000/AmazonS3/lifecycleManagement</id><content type="html" xml:base="http://localhost:4000/AmazonS3/lifecycle-management">&lt;h2 id=&quot;object-life-cycle&quot;&gt;Object Life Cycle&lt;/h2&gt;
&lt;p&gt;You can handle objects by managing its lifecycle.&lt;/p&gt;
&lt;h2 id=&quot;how-will-you-manage&quot;&gt;How will you manage?&lt;/h2&gt;
&lt;p&gt;You can create S3 LifeCycle configuration which is basically a set of rules that define actions that S3 performs on the group of objects.&lt;/p&gt;

&lt;p&gt;These action can be of two types -&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Transition Action&lt;/strong&gt; -
This action performs transition of group of objects from one storage class to another at any given time.
Eg- transition from S3 Standard to S3 Glacier Storage Class.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expiration Action&lt;/strong&gt; -
This Action performs deletion of objects at any given time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note - S3 deletes on your behalf by running some process.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-cases-when-you-need-object-life-cycle&quot;&gt;Use cases when you need object Life Cycle&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;You need to backup long term database backups, business reports.&lt;/li&gt;
  &lt;li&gt;You need to delete server or application logs after some time.&lt;/li&gt;
  &lt;li&gt;You need to move records which are not used frequently after some time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-create-bucketlifecycleconfiguration-rule&quot;&gt;1. create BucketLifecycleConfiguration Rule&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void createLifeCycleConfiguration(AmazonS3 amazonS3,String bucketName){

  // apply this rules to the objects having prefix heavyReports which gets filtered through prefix
  // LifecyclePrefixPredicate - to filter objects through prefix to report
  BucketLifecycleConfiguration.Rule rule1=new Rule()
      .withId(&quot;rule id 1&quot;)
      .withFilter(new LifecycleFilter(new LifecyclePrefixPredicate(&quot;heavyReports/&quot;)))
      .addTransition(new Transition().withDays(90).withStorageClass(StorageClass.Glacier))
      .addTransition(new Transition().withDays(180).withStorageClass(StorageClass.DeepArchive))
      .withExpirationInDays(700)
      .withStatus(BucketLifecycleConfiguration.ENABLED);


  // apply this rules to the objects which has keyName tag and value - tagValue
  // LifecycleTagPredicate - to filter objects through tags
  BucketLifecycleConfiguration.Rule rule2=new Rule()
      .withId(&quot;rule id 2&quot;)
      .withFilter(new LifecycleFilter(new LifecycleTagPredicate(new Tag(&quot;keyName&quot;,&quot;tagValue&quot;))))
      .addTransition(new Transition().withDays(60).withStorageClass(StorageClass.Glacier))
      .withExpirationInDays(120)
      .withStatus(BucketLifecycleConfiguration.ENABLED);

  // create BucketLifecycleConfiguration and set rule list
  BucketLifecycleConfiguration bucketLifecycleConfiguration=new BucketLifecycleConfiguration();
  bucketLifecycleConfiguration.setRules(Arrays.asList(rule1,rule2));

  // save the configuration
  amazonS3.setBucketLifecycleConfiguration(bucketName,bucketLifecycleConfiguration);

}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we use amazonS3 client we created in this &lt;a href=&quot;/AmazonS3/setup-java-project&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 1&lt;/strong&gt; - it moves all the objects which has &lt;strong&gt;prefix - heavyReports&lt;/strong&gt;. &lt;strong&gt;After 90 days&lt;/strong&gt;, it gets move to Glacier Storage Class. &lt;strong&gt;After 180 days&lt;/strong&gt;, it gets move to DeepArchive Storage Class. &lt;strong&gt;After 700 days&lt;/strong&gt;, it gets delete by the Amazon S3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 2&lt;/strong&gt;- it moves all the objects which has &lt;strong&gt;keyName tag’s value- tagValue&lt;/strong&gt;. &lt;strong&gt;After 60 days&lt;/strong&gt;, it gets move to Glacier Storage Class. &lt;strong&gt;After 120 days&lt;/strong&gt;, it gets delete by the Amazon S3.&lt;/p&gt;

&lt;p&gt;Then add those rules to BucketLifecycleConfiguration object and set this LifeCycle Configuration using setBucketLifecycleConfiguration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note - You cannot use Prefix base tag and Filter base tag in a Single LifeCycle Policy.These tags cannot be used within a single policy.&lt;/strong&gt;
&lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?threadID=266960&quot;&gt;Check this thread for more info&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-get-rules-from-bucketlifecycleconfiguration&quot;&gt;2. get Rules from BucketLifecycleConfiguration&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void getLifeCycleConfiguration(AmazonS3 amazonS3,String bucketName){
    BucketLifecycleConfiguration bucketLifecycleConfiguration=amazonS3.getBucketLifecycleConfiguration(bucketName);
    List&lt;span class=&quot;nt&quot;&gt;&amp;lt;BucketLifecycleConfiguration&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; rulesList=bucketLifecycleConfiguration.getRules();
    for(BucketLifecycleConfiguration.Rule rule:rulesList){
      LOG.info(&quot;bucket rule id- &quot;+rule.getId());
    }
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Call getBucketLifecycleConfiguration() to get the configuration and then get rules from it by calling getRules()&lt;/p&gt;

&lt;h3 id=&quot;3-delete-bucketlifecycleconfiguration&quot;&gt;3. delete BucketLifecycleConfiguration&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void deleteLifeCycleConfiguration(AmazonS3 amazonS3,String bucketName){
    amazonS3.deleteBucketLifecycleConfiguration(bucketName);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Call deleteBucketLifecycleConfiguration() to delete the configuration.&lt;/p&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/s3/index.html&quot;&gt;Amazon S3 Official Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;completion-of-amazon-s3-series&quot;&gt;COMPLETION OF AMAZON S3 SERIES&lt;/h2&gt;

&lt;p&gt;Now you have the knowledge of the Amazon S3, it basic concepts, how to integrate in java and perform operations.&lt;/p&gt;

&lt;p&gt;Hope this series helps you in unsertanding Amazon S3.&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="amazon s3" /><summary type="html">Object Life Cycle You can handle objects by managing its lifecycle. How will you manage? You can create S3 LifeCycle configuration which is basically a set of rules that define actions that S3 performs on the group of objects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/amazon-s3/lifecycle-management/lifecycle-management.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/amazon-s3/lifecycle-management/lifecycle-management.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Amazon S3 Storage Classes</title><link href="http://localhost:4000/AmazonS3/storage-classes" rel="alternate" type="text/html" title="Amazon S3 Storage Classes" /><published>2020-06-03T13:30:00+05:30</published><updated>2020-06-03T13:30:00+05:30</updated><id>http://localhost:4000/AmazonS3/storageClasses</id><content type="html" xml:base="http://localhost:4000/AmazonS3/storage-classes">&lt;h2 id=&quot;aws-storage-classes&quot;&gt;AWS Storage Classes&lt;/h2&gt;
&lt;p&gt;Storage Classes in AWS lets you store objects in a cost effecient manner.
Every Object belong to a Storage class.&lt;/p&gt;

&lt;h2 id=&quot;types-of-storage-classes-in-aws&quot;&gt;Types of Storage Classes in AWS&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;S3 Standard&lt;/strong&gt; - Frequently accessed data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S3 Standard-IA&lt;/strong&gt; - Long-lived, infrequently accessed data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S3 Intelligent-Tiering&lt;/strong&gt; - Long-lived data with changing or unknown access pattern&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S3 One Zone-IA&lt;/strong&gt; - Long-lived, infrequently accessed, non-critical data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S3 Glacier&lt;/strong&gt; - Long-term data archiving with retrieval times ranging from minutes to hours&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S3 Glacier Deep Archive&lt;/strong&gt; - Archiving rarely accessed data with a default retrieval time of 12 hours&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduced Redundancy Storage (RRS)&lt;/strong&gt; - Frequently accessed, non-critical data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note - RSS not recommended&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;factors-considering-while-selecting-storage-classes&quot;&gt;Factors considering while selecting Storage Classes&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Access of data&lt;/strong&gt; - how frequently you want to access data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Min Storage duration&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;
and many more&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;there-are--many-examples-for-which-you-need-to-change-storage-class-of-objects&quot;&gt;There are  many examples for which you need to change Storage Class of objects.&lt;/h3&gt;
&lt;p&gt;Eg - Suppose you are storing reports in AWS which are used by the clients.&lt;/p&gt;
&lt;p&gt;For 10-15 days,it is accessed frequently by the clients, so you need S3 Standard Storage Class.&lt;/p&gt;
&lt;p&gt;After 1 month, the reports are not accessed frequently, so you can move these reports to S3 Standard-IA Storage Classes.&lt;/p&gt;
&lt;p&gt;After 2 months, the reports are accessed rarely, so you can move these reports to S3 Glacier Deep Archive Storage Classes.&lt;/p&gt;

&lt;p&gt;By doing this, you can use your money effectively.&lt;/p&gt;

&lt;p&gt;Transition of objects from one storage class to another can be set by making rules at bucket level. This feature can be done in
&lt;a href=&quot;/AmazonS3/lifecycle-management&quot;&gt;&lt;strong&gt;Life Cycle Management&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comparison-graph-of-aws-s3-storage-class&quot;&gt;Comparison graph of AWS S3 Storage class&lt;/h2&gt;
&lt;div class=&quot;table&quot;&gt;
&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-31ua{background-color:#ffcc67;border-color:inherit;text-align:left;vertical-align:top}
.tg .tg-ik58{background-color:#ffcb2f;border-color:inherit;text-align:left;vertical-align:top}
.tg .tg-i1q2{background-color:#34cdf9;border-color:inherit;text-align:left;vertical-align:top}
.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-ik58&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Storage class&lt;/span&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-ik58&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Designed for&lt;/span&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-31ua&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Durability (designed for)&lt;/span&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-ik58&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Availability (designed for)&lt;/span&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-ik58&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Availability Zones&lt;/span&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-ik58&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Min storage duration&lt;/span&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-ik58&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Min billable object size&lt;/span&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-i1q2&quot;&gt;S3 Standard&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;Frequently accessed data&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.999999999%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.99%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&amp;gt;= 3&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;None&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;None&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-i1q2&quot;&gt;S3 Standard-IA&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;Long-lived, infrequently accessed data&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.999999999%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.9%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&amp;gt;= 3&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;30 days&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;128 KB&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-i1q2&quot;&gt;S3 Intelligent-Tiering&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;Long-lived data with changing or unknown access patterns&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.999999999%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.9%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&amp;gt;= 3&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;30 days&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;None&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-i1q2&quot;&gt;S3 One Zone-IA&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;Long-lived, infrequently accessed, non-critical data&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.999999999%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.5%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;1&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;30 days&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;128 KB&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-i1q2&quot;&gt;S3 Glacier&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;Long-term data archiving with retrieval times ranging from minutes to hours&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.999999999%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.99%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&amp;gt;= 3&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;90 days&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;40 KB&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-i1q2&quot;&gt;S3 Glacier Deep Archive&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;Archiving rarely accessed data with a default retrieval time of 12 hours&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.999999999%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.99%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&amp;gt;= 3&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;180 days&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;40 KB&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-i1q2&quot;&gt;RRS (Not recommended)&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;Frequently accessed, non-critical data&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.99%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;99.99%&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&amp;gt;= 3&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;None&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;None&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You are successfully able to understand Object Storage Classes.&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="amazon s3" /><summary type="html">AWS Storage Classes Storage Classes in AWS lets you store objects in a cost effecient manner. Every Object belong to a Storage class.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/amazon-s3/storage-classes/storage-classes.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/amazon-s3/storage-classes/storage-classes.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Amazon S3 Sharing Object URL</title><link href="http://localhost:4000/AmazonS3/object-url" rel="alternate" type="text/html" title="Amazon S3 Sharing Object URL" /><published>2020-06-02T00:00:00+05:30</published><updated>2020-06-02T00:00:00+05:30</updated><id>http://localhost:4000/AmazonS3/shareObject</id><content type="html" xml:base="http://localhost:4000/AmazonS3/object-url">&lt;h2 id=&quot;objective&quot;&gt;Objective&lt;/h2&gt;
&lt;p&gt;This tutorial describes how to share Amazon S3 Object URL - PreSigned URL and Public URL.&lt;/p&gt;

&lt;p&gt;There are two ways to share URL -&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;By Generating &lt;strong&gt;PreSigned URL&lt;/strong&gt; (for public and private objects).&lt;/li&gt;
  &lt;li&gt;By Sharing &lt;strong&gt;public URL&lt;/strong&gt; (for public objects).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-by-generating-presigned-url&quot;&gt;1. By Generating PreSigned URL&lt;/h2&gt;

&lt;p&gt;PreSigned URL is the URL created by the owner of the object from its security credentials to grant others time limited access.&lt;/p&gt;
&lt;p&gt;The PreSigned URL comprises of &lt;strong&gt;Security Credentials + Bucket Name + object key + Expiration time and date + HTTP Method (GET to download the object and PUT to upload an object).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code to generate PreSigned URL -&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void generatePreSignedURL(AmazonS3 amazonS3,String bucketName,String objectKey){

    Calendar calendar= Calendar.getInstance();
    calendar.add(Calendar.DAY_OF_MONTH,5); // expiration time - 5 days

    GeneratePresignedUrlRequest generatePresignedUrlRequest =
        new GeneratePresignedUrlRequest(bucketName,objectKey)
            .withMethod(HttpMethod.GET)
            .withExpiration(calendar.getTime());

    URL url = amazonS3.generatePresignedUrl(generatePresignedUrlRequest);
    LOG.info(&quot;URL- &quot; + url.toString());
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we use amazonS3 client we created in this &lt;a href=&quot;/AmazonS3/setup-java-project&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We created a GeneratePresignedUrlRequest by passing object key, HttpMethod and expiration time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note - This link will expire after 5 days (value set in expiration).&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-public-url&quot;&gt;2. Public URL&lt;/h2&gt;
&lt;p&gt;For this URL to work, you need to give &lt;strong&gt;public permission to object&lt;/strong&gt;.&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-object-permissions.html&quot;&gt; Check this link for how to set object permsission.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code to generate Public URL -&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;// it creates URL for public objects
public static void generatePublicURL(AmazonS3 amazonS3,String bucketName,String objectKey){
  URL url=amazonS3.getUrl(bucketName,objectKey);
  LOG.info(&quot;URL- &quot; + url.toString());
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We simply call getUrl() on amazon S3 client.&lt;/p&gt;

&lt;p&gt;You are successfully able to share object URL.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/techypoint/amazon-s3.git&quot;&gt;Click to get the full Implementation of this tutorial on Github&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="amazon s3" /><summary type="html">Objective This tutorial describes how to share Amazon S3 Object URL - PreSigned URL and Public URL.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/amazon-s3/object-url/sharing-Object-Url.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/amazon-s3/object-url/sharing-Object-Url.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Amazon S3 Operations</title><link href="http://localhost:4000/AmazonS3/operations" rel="alternate" type="text/html" title="Amazon S3 Operations" /><published>2020-06-01T00:00:00+05:30</published><updated>2020-06-01T00:00:00+05:30</updated><id>http://localhost:4000/AmazonS3/operations</id><content type="html" xml:base="http://localhost:4000/AmazonS3/operations">&lt;h2 id=&quot;objective&quot;&gt;Objective&lt;/h2&gt;
&lt;p&gt;This tutorial describes the basics operations on bucket and objects using java sdk.&lt;/p&gt;

&lt;p&gt;Operations includes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create bucket&lt;/li&gt;
  &lt;li&gt;List buckets&lt;/li&gt;
  &lt;li&gt;Delete buckets&lt;/li&gt;
  &lt;li&gt;Get Object&lt;/li&gt;
  &lt;li&gt;List Objects&lt;/li&gt;
  &lt;li&gt;List Objects With limit&lt;/li&gt;
  &lt;li&gt;Upload or put object in a bucket&lt;/li&gt;
  &lt;li&gt;Delete Object&lt;/li&gt;
  &lt;li&gt;Copy Object&lt;/li&gt;
  &lt;li&gt;Read File Content&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-create-bucket&quot;&gt;1. Create bucket&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;   public static void createBucket(AmazonS3 amazonS3,String bucketName){
    if(!amazonS3.doesBucketExistV2(bucketName)){
      Bucket bucket=amazonS3.createBucket(new CreateBucketRequest(bucketName));
    }else{
      LOG.info(&quot;Bucket name already exists&quot;);
    }
  }
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we use amazonS3 client we created in this &lt;a href=&quot;/AmazonS3/setup-java-project&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we check whether bucketName exists or not. If not exists, then we create by using createBucket().&lt;/p&gt;

&lt;h2 id=&quot;2-list-buckets&quot;&gt;2. List buckets&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;   public static void listBuckets(AmazonS3 amazonS3){
    List&lt;span class=&quot;nt&quot;&gt;&amp;lt;Bucket&amp;gt;&lt;/span&gt; bucketList=amazonS3.listBuckets();
    for(Bucket bucket : bucketList) {
      LOG.info(&quot;bucket name - &quot;+bucket.getName());
    }
  }
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We call listBuckets() on amazonS3 client to get all the bucket list created.
Here, we we use only bucket name. You can also fetch other information from the Bucket object.&lt;/p&gt;

&lt;h2 id=&quot;3-delete-buckets&quot;&gt;3. Delete buckets&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;// it is important to empty bucket before deleting it
public static void deleteBuckets(AmazonS3 amazonS3,String bucketName){

  // delete all objects in a bucket
  ObjectListing listObjects = amazonS3.listObjects(bucketName);
  List&lt;span class=&quot;nt&quot;&gt;&amp;lt;S3ObjectSummary&amp;gt;&lt;/span&gt; s3ObjectSummaryList=listObjects.getObjectSummaries();
  while (true){
    for(S3ObjectSummary s3ObjectSummary:s3ObjectSummaryList){
      amazonS3.deleteObject(bucketName,s3ObjectSummary.getKey());
    }
    if(listObjects.isTruncated()){
      // listNextBatchOfObjects - this will next batch of objects
      listObjects=amazonS3.listNextBatchOfObjects(listObjects);
    }else{
      break;
    }
  }

  // delete all version objects in a buckets
  VersionListing versionList = amazonS3.listVersions(new ListVersionsRequest().withBucketName(bucketName));
  List&lt;span class=&quot;nt&quot;&gt;&amp;lt;S3VersionSummary&amp;gt;&lt;/span&gt; versionSummaryList=versionList.getVersionSummaries();
  while (true){
    for(S3VersionSummary s3VersionSummary:versionSummaryList){
      amazonS3.deleteVersion(bucketName,s3VersionSummary.getKey(),s3VersionSummary.getVersionId());
    }
    if(versionList.isTruncated()){
      // listNextBatchOfObjects - this will next batch of objects
      versionList=amazonS3.listNextBatchOfVersions(versionList);
    }else{
      break;
    }
  }
  // finally delete bucket
  amazonS3.deleteBucket(bucketName);
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is important to empty bucket before deleting it.&lt;/p&gt;

&lt;p&gt;To Empty a bucket, we need to delete version objects and not version objects.
Check this tutorial for &lt;a href=&quot;/AmazonS3/versioning&quot;&gt;versioning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we call listObjects() to fetch object list. It returns some or all (up to 1,000) of the objects in a bucket.
Then we delete object one by one by calling deleteObject().
Then we call isTruncated() to check whether Amazon S3 returned all the objects.
If not, then we again fetch the next batch of objects by calling listNextBatchOfObjects().&lt;/p&gt;

&lt;p&gt;In the Same Manner, we deleted verion objects.&lt;/p&gt;

&lt;h2 id=&quot;4-get-object&quot;&gt;4. Get Object&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void getObject(AmazonS3 amazonS3,String bucketName){
  String objectKey=&quot;object key 1&quot;;
  S3Object s3Object=amazonS3.getObject(bucketName,objectKey);
  LOG.info(&quot;object key- &quot;+s3Object.getKey());
  LOG.info(&quot;object metadata- &quot;+s3Object.getObjectContent());
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We need to know key of the object. Then we call getObject() to fetch S3 object.&lt;/p&gt;

&lt;h2 id=&quot;5-list-objects&quot;&gt;5. List Objects&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void listObjects(AmazonS3 amazonS3,String bucketName){
    // list all objects in a buckets
    ObjectListing objectListing=amazonS3.listObjects(bucketName);
    for(S3ObjectSummary os : objectListing.getObjectSummaries()) {
      LOG.info(&quot;key-&quot;+os.getKey());
      LOG.info(&quot;Size -&quot;+os.getSize());
    }
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can list all objects in a buckets by calling listObjects().&lt;/p&gt;

&lt;h2 id=&quot;6-list-objects-with-limit&quot;&gt;6. List Objects With limit&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;// list n no. of objects of a buckets at a time
// and get more object keys if require
public static void listObjectsWithLimit(AmazonS3 amazonS3,String bucketName){
  ListObjectsV2Request listObjectsV2Request=new ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(5);
  ListObjectsV2Result listObjectsV2Result=amazonS3.listObjectsV2(listObjectsV2Request);
  while (true){
    List&lt;span class=&quot;nt&quot;&gt;&amp;lt;S3ObjectSummary&amp;gt;&lt;/span&gt; s3ObjectSummaryList=listObjectsV2Result.getObjectSummaries();
    for(S3ObjectSummary s3ObjectSummary:s3ObjectSummaryList){
      // you can other values of s3ObjectSummary
      LOG.info(&quot;key- &quot;+s3ObjectSummary.getKey());
    }
    if(listObjectsV2Result.isTruncated()){
      String token=listObjectsV2Result.getNextContinuationToken();
      listObjectsV2Request.setContinuationToken(token);
    }else{
      break;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can fetch n number of objects at a time by creating ListObjectsV2Request object and setting max keys to n
and then call listObjectsV2(listObjectsV2Request).&lt;/p&gt;

&lt;h2 id=&quot;7-upload-or-put-object-in-a-bucket&quot;&gt;7. Upload or put object in a bucket&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void uploadObjectInABucket(AmazonS3 amazonS3,String bucketName){
    // code to upload a text as a object
    String objectKey1=&quot;object key 1&quot;;
    String objectValue=&quot;Upload a Text String&quot;;
    amazonS3.putObject(bucketName,objectKey1,objectValue);

    // code to upload a file as a object
    String objectKey2=&quot;object key 2&quot;;
    String pathToFile=&quot;Path of File&quot;;
    PutObjectRequest putObjectRequest=new PutObjectRequest(bucketName,objectKey2,
        new File(pathToFile));
    ObjectMetadata objectMetadata=new ObjectMetadata();
    objectMetadata.setContentType(&quot;application/pdf&quot;);
    // use can set other meta data as a key value pair in ObjectMetadata
    objectMetadata.addUserMetadata(&quot;metaDataKey&quot;,&quot;metaDataValue&quot;);
    putObjectRequest.setMetadata(objectMetadata);
    amazonS3.putObject(putObjectRequest);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Use putObject() to upload object to Amazon S3.
It takes bucket name, object key and data(string or file).
You can upload any file and need to set the setContentType in the metadata.
You can also set custom key-value pair against a object in the ObjectMetadata using addUserMetadata().&lt;/p&gt;

&lt;h2 id=&quot;8-delete-object&quot;&gt;8. Delete Object&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void deleteObject(AmazonS3 amazonS3,String bucketName){
  String objectKey=&quot;object key 1&quot;;
  amazonS3.deleteObject(new DeleteObjectRequest(bucketName,objectKey));
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Use deleteObject() to delete the object from the bucket.&lt;/p&gt;

&lt;h2 id=&quot;9-copy-object&quot;&gt;9. Copy Object&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;// copy object in bucketName1 having key - objectKey1 to bucketName2 having key - objectKey2
public static void copyObjectFromOneKeyToAnother(AmazonS3 amazonS3){
  String bucketName1=&quot;bucketnametocreate&quot;; // source bucket name
  String bucketName2=&quot;bucketName2&quot;; // destination bucket name
  String objectKey1=&quot;objectKey1&quot;;   // source object key
  String objectKey2=&quot;objectKey2&quot;;   // destination object key
  amazonS3.copyObject(new CopyObjectRequest(bucketName1,objectKey1,bucketName2,objectKey2));
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also copy object from one bucket to another bucket by using copyObject().&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note - Bucket needs to be exist before copying&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-read-file-content&quot;&gt;10. Read File Content&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void readFileContent(AmazonS3 amazonS3,String bucketName) throws IOException {
    String objectKey=&quot;object key 1&quot;;
    S3Object s3Object=amazonS3.getObject(bucketName,objectKey);
    BufferedReader reader = new BufferedReader(new InputStreamReader(s3Object.getObjectContent()));
    String line = null;
    // read input stream line by line
    while ((line = reader.readLine()) != null) {
      LOG.info(&quot;line - &quot;+line);
    }
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Call getObjectContent() to get the input steam and then read line by line using BufferedReader object.&lt;/p&gt;

&lt;p&gt;You are successfully able to execute most common operations on bucket and objects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/techypoint/amazon-s3.git&quot;&gt;Click to get the full Implementation of this tutorial on Github&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="amazon s3" /><summary type="html">Objective This tutorial describes the basics operations on bucket and objects using java sdk.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/amazon-s3/operations/operations.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/amazon-s3/operations/operations.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Amazon S3 Versioning</title><link href="http://localhost:4000/AmazonS3/versioning" rel="alternate" type="text/html" title="Amazon S3 Versioning" /><published>2020-05-31T00:00:00+05:30</published><updated>2020-05-31T00:00:00+05:30</updated><id>http://localhost:4000/AmazonS3/versioning</id><content type="html" xml:base="http://localhost:4000/AmazonS3/versioning">&lt;h2 id=&quot;what-is-amazon-s3-versioning&quot;&gt;What is Amazon S3 Versioning&lt;/h2&gt;

&lt;p&gt;Versioning in aws s3 means to keep &lt;strong&gt;variants of the same object.&lt;/strong&gt;
Versioning can be helpful in maintaining different states of objects.
If versioning is enabled for bucket, Amazon S3 automatically creates &lt;strong&gt;version id&lt;/strong&gt; for the object.&lt;/p&gt;

&lt;p&gt;Eg -
In the bucket, you have two object with the same key but with different version id&lt;/p&gt;

&lt;p&gt;Object 1  - object 1 key + version id(1)&lt;/p&gt;

&lt;p&gt;Object 2  - object 1 key + version id(2)&lt;/p&gt;

&lt;p&gt;Version enabled buckets can be recovered from accidental deletion or overwrite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note - you need to explicitly enable version for the bucket.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;enable-versioning-in-a-bucket&quot;&gt;Enable Versioning In a Bucket&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Step 1 - Login in to your Amazon S3 account.&lt;/li&gt;
  &lt;li&gt;Step 2 - Search s3 on search bar and select S3&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;AWS Management Console Panel&quot; title=&quot;AWS Management Console Panel&quot; src=&quot;/assets/img/amazon-s3/versioning/aws_console_panel.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 3 - Click on bucket name&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Amazon S3 Bucket list&quot; title=&quot;Amazon S3 Bucket list&quot; src=&quot;/assets/img/amazon-s3/versioning/amazon-s3-bucket-list.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 4 - Go to Properties and Enable Versioning.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;AWS Management Console Panel&quot; title=&quot;AWS Management Console Panel&quot; src=&quot;/assets/img/amazon-s3/versioning/bucket_properties.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now you are successfully able to enable versioning of a bucket.&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="amazon s3" /><summary type="html">What is Amazon S3 Versioning</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/amazon-s3/versioning/Versioning.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/amazon-s3/versioning/Versioning.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Amazon S3 Set Up Java Project</title><link href="http://localhost:4000/AmazonS3/setup-java-project" rel="alternate" type="text/html" title="Amazon S3 Set Up Java Project" /><published>2020-05-30T00:00:00+05:30</published><updated>2020-05-30T00:00:00+05:30</updated><id>http://localhost:4000/AmazonS3/setUpJavaProject</id><content type="html" xml:base="http://localhost:4000/AmazonS3/setup-java-project">&lt;h2 id=&quot;objective&quot;&gt;Objective&lt;/h2&gt;
&lt;p&gt;This tutorial will help you in creating access key and secret key which required in making connection.
Then we will create project in java and create connection with Amazon S3.&lt;/p&gt;

&lt;h2 id=&quot;now-lets-create-your-access-key-and-secret-key&quot;&gt;Now lets create your access key and secret key&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Step 1 - Login in to your Amazon S3 account.&lt;/li&gt;
  &lt;li&gt;Step 2 - Click on My Security Credentials&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Security Credentials Option&quot; title=&quot;Security Credentials Option&quot; src=&quot;/assets/img/amazon-s3/setup-java-project/security_credential_option.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 3 - Now select Access keys (access key id and secret access key)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;AWS Security Credentials&quot; title=&quot;AWS Security Credentials&quot; src=&quot;/assets/img/amazon-s3/setup-java-project/aws_security_credentials.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 4 - click on create new Access key, you will get the option of download key file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;AWS Credential Download Option&quot; title=&quot;AWS Credential Download Option&quot; src=&quot;/assets/img/amazon-s3/setup-java-project/aws_credential_download_option.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 5 - In the file, you will get access key and secret key.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;now-set-up-java-project&quot;&gt;Now Set Up Java Project&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create a maven project in your favourite IDE.&lt;/li&gt;
  &lt;li&gt;Add maven dependency for AWS java sdk in pom.xml&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.amazonaws&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;aws-java-sdk-s3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.11.781&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Now to create connection with AmazonS3, you will need to know
    &lt;ul&gt;
      &lt;li&gt;AWS account&lt;/li&gt;
      &lt;li&gt;AWS security credentials (Access key and Secret Key)&lt;/li&gt;
      &lt;li&gt;AWS Region&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Code to create connection with Amazon S3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;public static void main(String[] args) {
    // now create BasicAWSCredentials object by using access key and secret key
    BasicAWSCredentials basicAWSCredentials=new BasicAWSCredentials(&quot;pass access key&quot;,
        &quot;pass secret key&quot;);
    // get AmazonS3 Client by passing basicAWSCredentials and specify region which is closest to you
    // or let it pick default region
    AmazonS3 amazonS3 = AmazonS3ClientBuilder.standard()
        .withCredentials(new AWSStaticCredentialsProvider(basicAWSCredentials))
        .withRegion(Regions.AP_SOUTH_1)
        .build();
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You are successfully able to create java project and able to make connection with Amazon S3.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/techypoint/amazon-s3.git&quot;&gt;Click to get the full Implementation of this tutorial on Github&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="amazon s3" /><summary type="html">Objective This tutorial will help you in creating access key and secret key which required in making connection. Then we will create project in java and create connection with Amazon S3.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/amazon-s3/setup-java-project/Set-Up-Java-Project.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/amazon-s3/setup-java-project/Set-Up-Java-Project.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Amazon S3 Creating a Bucket</title><link href="http://localhost:4000/AmazonS3/create-a-bucket" rel="alternate" type="text/html" title="Amazon S3 Creating a Bucket" /><published>2020-05-29T00:00:00+05:30</published><updated>2020-05-29T00:00:00+05:30</updated><id>http://localhost:4000/AmazonS3/createABucket</id><content type="html" xml:base="http://localhost:4000/AmazonS3/create-a-bucket">&lt;h2 id=&quot;objective&quot;&gt;Objective&lt;/h2&gt;
&lt;p&gt;This tutorial shows how to create a bucket in Amazon S3 through AWS Management Console.&lt;/p&gt;

&lt;h2 id=&quot;now-lets-create-a-bucket&quot;&gt;Now Lets create a bucket&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Step 1 - Create an account on Amazon S3&lt;/li&gt;
  &lt;li&gt;Step 2 - After Creating account, login into Amazon S3&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Amazon Login Screen&quot; title=&quot;Amazon Login Screen&quot; src=&quot;/assets/img/amazon-s3/creating-a-bucket/amazon_login_screen.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 3 - Search s3 on search bar and select S3&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;AWS Management Console Panel&quot; title=&quot;AWS Management Console Panel&quot; src=&quot;/assets/img/amazon-s3/creating-a-bucket/aws_console_panel.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 4 - After Selecting S3, you will get the option to create bucket&lt;/li&gt;
  &lt;li&gt;Step 5 - Click on create bucket button and enter bucket name and make it public for now.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Create a bucket screen&quot; title=&quot;create a bucket screen&quot; src=&quot;/assets/img/amazon-s3/creating-a-bucket/create_bucket_screen.png&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Step 6 - You will see the created bucket in the list.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img alt=&quot;Bucket list screen&quot; title=&quot;bucket list screen&quot; src=&quot;/assets/img/amazon-s3/creating-a-bucket/bucket_list_screen.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now you are successfully able to create bucket in Amazon S3 account.&lt;/p&gt;</content><author><name>Varun Bisht</name></author><category term="amazon s3" /><summary type="html">Objective This tutorial shows how to create a bucket in Amazon S3 through AWS Management Console.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/amazon-s3/creating-a-bucket/creating-a-bucket.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/amazon-s3/creating-a-bucket/creating-a-bucket.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>