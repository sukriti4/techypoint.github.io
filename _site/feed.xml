<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-14T21:13:12+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">How to write large data in a file in java — analysis</title><link href="http://localhost:4000/java/a" rel="alternate" type="text/html" title="How to write large data in a file in java — analysis" /><published>2020-05-12T00:00:00+05:30</published><updated>2020-05-12T00:00:00+05:30</updated><id>http://localhost:4000/java/first-post</id><content type="html" xml:base="http://localhost:4000/java/a">&lt;div class=&quot;imgCont&quot;&gt;
  &lt;img src=&quot;/assets/img/java/first-post/test5.jpg&quot; /&gt;
&lt;/div&gt;
&lt;h1&gt;How to write large data in a file in java — analysis&lt;/h1&gt;
&lt;p&gt;The aim of this tutorial is to show how to write bulky or large data in files and
which output streams to you use for better performance in java.&lt;/p&gt;
&lt;p&gt;For the analysis purpose, I write 90 Mb(generated in code) of data in a file around 2000 times.so that I am able to analyze the following points —
1. heap memory used
2. avg time taken to write file
3. CPU performance&lt;/p&gt;
&lt;p&gt;To write files in java, I have used the following output stream -
1. FileOutputStream
2. RandomAccessFile
3. BufferedWriter&lt;/p&gt;
&lt;h2&gt;1. FileOutputStream&lt;/h2&gt;
&lt;h3&gt;Code-&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/techybeast/c0085193c2ca789639ba43f9d6646323.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Analysis data -&lt;/h3&gt;
&lt;div class=&quot;imgCont&quot;&gt;
&lt;img src=&quot;/assets/img/java/first-post/a.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Average Time- 332 ms&lt;/p&gt;
&lt;h2&gt;2. RandomAccessFile&lt;/h2&gt;
&lt;h3&gt;Code-&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/techybeast/19acef34cb63f91b1524d7c15f0f5c2c.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Analysis data -&lt;/h3&gt;
&lt;div class=&quot;imgCont&quot;&gt;
&lt;img src=&quot;/assets/img/java/first-post/b.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Average Time- 365 ms&lt;/p&gt;
&lt;h2&gt;3. BufferedWriter&lt;/h2&gt;
&lt;h3&gt;Code-&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/techybeast/baba3bd33613557f7f434657a53e339a.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Analysis data -&lt;/h3&gt;
&lt;div class=&quot;imgCont&quot;&gt;
&lt;img src=&quot;/assets/img/java/first-post/c.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Average Time- 286 ms&lt;/p&gt;
&lt;h2&gt;Results -&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/techybeast/9d4824c0e76e5a6f4bea92506951bea6.js&quot;&gt;&lt;/script&gt;

&lt;h2&gt;CONCLUSION&lt;/h2&gt;
&lt;p&gt;From the results, you can choose which output stream to use based on your requirements.&lt;/p&gt;
&lt;p&gt;In memory and CPU perspective, choose RandomAccessFile &lt;/p&gt;
&lt;p&gt;In speed and CPU perspective, choose BufferedWriter&lt;/p&gt;
&lt;p&gt;I hope it helps you.&lt;/p&gt;</content><author><name></name></author><summary type="html">How to write large data in a file in java — analysis The aim of this tutorial is to show how to write bulky or large data in files and which output streams to you use for better performance in java. For the analysis purpose, I write 90 Mb(generated in code) of data in a file around 2000 times.so that I am able to analyze the following points — 1. heap memory used 2. avg time taken to write file 3. CPU performance To write files in java, I have used the following output stream - 1. FileOutputStream 2. RandomAccessFile 3. BufferedWriter 1. FileOutputStream Code- Analysis data - Average Time- 332 ms 2. RandomAccessFile Code- Analysis data - Average Time- 365 ms 3. BufferedWriter Code- Analysis data - Average Time- 286 ms Results - CONCLUSION From the results, you can choose which output stream to use based on your requirements. In memory and CPU perspective, choose RandomAccessFile In speed and CPU perspective, choose BufferedWriter I hope it helps you.</summary></entry><entry><title type="html">Welcome vbeast</title><link href="http://localhost:4000/java/garbage-collection" rel="alternate" type="text/html" title="Welcome vbeast" /><published>2020-05-09T23:56:34+05:30</published><updated>2020-05-09T23:56:34+05:30</updated><id>http://localhost:4000/java/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/java/garbage-collection">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>